В таблицата по-долу трябва да посочите правилните места на операторите за сравнение в C#. В колона Означение поставяте съответния оператор, а в колона Работи за - задавате данните, за които може да работи съответния оператор.

Оператор	Означение	Работи за
Проверка за равенство	[==]	[числа, стрингове, дати]
Проверка за различие	[ !=]
По-голямо	[ >]	[числа, дати, други сравними типове]
По-голямо или равно	[>=]
По-малко	[<]
По-малко или равно	[<=]

----------------------------------------------------------------------------------------------

 int n = int.Parse(Console.ReadLine()); 
            int d2 = 0; //2Т
            int d3 = 0; 
            int d5 = 0; 

            for (int i = 0; i < n; i++) //2Т
            {
                int number = int.Parse(Console.ReadLine());//2Т
                if (number % 2 == 0) 
                {
                    d2++; 
                }//1Т
                if (number % 3 == 0) 
                {
                    d3++; //1Т
                }
                if (number % 5 == 0) //2Т
                {
                    d5++; 
                }
            }

            Console.WriteLine(d2); 
            Console.WriteLine(d3); 
            Console.WriteLine(d5);

----------------------------------------------------------------------------------------------

int days = int.Parse(Console.ReadLine());//2т
            int kgFood = int.Parse(Console.ReadLine()); 
            double dailyFoodFirst = double.Parse(Console.ReadLine()); 
            double dailyFoodSecond = double.Parse(Console.ReadLine()); //2т
            double dailyFoodThird = double.Parse(Console.ReadLine()); 

            //2т
            double foodNeeded = days * dailyFoodFirst
                                + days * dailyFoodSecond
                                + days * dailyFoodThird; 

            if (kgFood >= foodNeeded) //2т
            {
                Console.WriteLine($"{Math.Floor(kgFood - foodNeeded)} kilos of food left.");//1т
            }
            else 
            {
                Console.WriteLine($"{Math.Ceiling(foodNeeded - kgFood)} more kilos of food are needed.");//1т
            }
            ---
             static void Main(string[] args)
        {
            int days = int.Parse(Console.ReadLine());//1Т
            int doctors = 7;
            int treated = 0; 
            int untreated = 0; 
            for (int day = 1; day <= days; day++) //1Т
            {
                int patientsCount = int.Parse(Console.ReadLine());

                if (day % 3 == 0 && untreated > treated) //2Т
                {
                    doctors++; 
                }
                if (patientsCount <= doctors)//1Т
                {
                    treated += patientsCount; 
                }
                else
                {//1Т
                    treated += doctors;
                    untreated += (patientsCount - doctors);//2Т
                } 
            } 
            Console.WriteLine($"Treated patients: {treated}."); //1Т
            Console.WriteLine($"Untreated patients: {untreated}."); //1Т
        }
        
        
--------------------------------------------------------------------------------------------------
         
         
         static void Main(string[] args)
        {
            string month = Console.ReadLine(); //2Т
            int nightsCount = int.Parse(Console.ReadLine());
            double studio = 0; 
            double apartment = 0; 
            switch (month) 
            {
                case "May":
                case "October":
                    studio = 50;
                    apartment = 65;
                    if (nightsCount > 14) 
                    {
                        studio -= studio * 0.30;//1Т
                    }
                    else if (nightsCount > 7) //2Т
                    {
                        studio -= studio * 0.05;
                    }
                    break;
                case "June":
                case "September":
                    studio = 75.20;
                    apartment = 68.70;
                    if (nightsCount > 14)
                    {//1Т
                        studio -= studio * 0.20; 
                    }
                    break;
                case "July"://1Т
                case "August":
                    studio = 76;
                    apartment = 77;
                    break;
            }

            if (nightsCount > 14) 
            {
                apartment -= apartment * 0.1; //2Т
            }

            double totalApartment = apartment * nightsCount; 
            double totalStudio = studio * nightsCount; 
            Console.WriteLine($"Apartment: {totalApartment:f2} lv.");//1Т
            Console.WriteLine($"Studio: {totalStudio:f2} lv."); 
        }
        
        
----------------------------------------------------------------------------------------------
        
        
         static void Main(string[] args)
        {
            string sector = Console.ReadLine(); //1Т
            int row = int.Parse(Console.ReadLine());
            int col = int.Parse(Console.ReadLine()); 
            double totalSum = 0;//2Т

            switch (sector)//2Т
            { 
                case "Sector A":
                    totalSum = GetTotalProfit(row, col, 11.60); 
                    break; //2Т
                case "Sector B":
                    totalSum = GetTotalProfit(row, col, 14.50);//1Т
                    break;
                case "Sector C": 
                    totalSum = GetTotalProfit(row, col, 16.10); 
                    break;
                case "Sector D"://1Т
                    totalSum = GetTotalProfit(row, col, 8.40);
                    break;
            }//1Т
            Console.WriteLine($"{sector} profit is {totalSum:f2} lv.");
        }
        static double GetTotalProfit(int row, int col, double price)
        {
            return row * col * price;
        }
        
 ----------------------------------------------------------------------------------------------
        
         int number = int.Parse(Console.ReadLine()); 
            int firstDigit = number / 100; 
            int secondDigit = (number / 10) % 10; //2Т
            int thirdDigit = number % 10; //2Т
            int rows = firstDigit + secondDigit; 
            int cols = firstDigit + thirdDigit; 

            for (int row = 0; row < rows; row++) //2Т
            {
                for (int col = 0; col < cols; col++) //2Т
                {
                    if (number % 5 == 0) 
                    {
                        number -= firstDigit;
                    }
                    else if (number % 3 == 0) //1Т
                    {
                        number -= secondDigit;//1Т
                    }
                    else
                    {
                        number += thirdDigit; 
                    }
                    Console.Write($"{number} "); 
                } 

                Console.WriteLine(); 
            }
        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Имате даден следният програмен фрагмент:

Открийте какъв ще бъде резултатът след изпълнението на програмата при подаден вход 120.

Изберете едно
a. Greater than 100
b. Less than 200
c. Програмата ще хвърли изключение.
d. Between 100 and 200 <<<<<<<<<<<<<<<<<<<<<<<<<<<<

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Посочете как се записва в C# кратка форма на условна конструкция?
Изберете едно
a. do if(true) { //some code... }
b. if(true) { //some code... } if else() { //some code... } 
c. if(true) { //some code... }<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
d. (true) { //some code... }

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Дайте пример за метод (напишете примерен код), който сумира числата от 1 до n включително и като резултат връща тази сума. За примера използвайте код написан на програмния език C#.

public static int SumNumbers(int n)
 {
       int sum = 0;
       for (int i = 1; i <= n; i++)
       {
            sum += i;
        }
       return sum;
}
  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Посочете кои езици за програмиране работят с компилатор, кои с интерпретатор?

Език за програмиране	компилатор/интерпретатор
Python	[с интерпретатор]
PHP	[с интерпретатор]
C++	[с компилатор]
C#	[с компилатор]
Java [с компилатор]
JavaScript 	[с интерпретатор]

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Дайте пример за for - цикъл в C#. За пример може да ползвате код, който отпечатва на конзолата числата от 1 до 100.

using System;
namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
           for (int i = 1; i <= 100; i++)
            {
                Console.WriteLine(i);
            }
        }
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Даден е следният примерен код на C#. Изчислете какъв ще бъде резултата, ако числото n = 5 , запишете в полето за отговор това, което ще се отпечата на конзолата.

Правилният отговор е: 6


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Дефинирайте понятието for цикъл в C#. 
Опишете декларацията на for цикъл който преминава последователно през числата от 1 до 10 и ги отпечатва. Опишете конструкцията на for цикълa, декларация, стъпки, цел и тяло на цикъла. 

for (int i = 1; i <= 10; i++)
{
      Console.WriteLine(i);
}


Цикълът започва с оператора for и преминава през всички стойности за дадена променлива в даден интервал, например всички числа от 1 до 10 включително, и за всяка стойност изпълнява поредица от команди.

В декларацията на цикъла може да се зададе начална стойност (i = 1) и крайна стойност (i <= 10). Тялото на цикъла обикновено се огражда с къдрави скоби { } и представлява блок с една или няколко команди. 

Целта на цикъла е да се премине последователно през числата 1, 2, 3, …, n и за всяко от тях да се изпълни някакво действие. 

В примера по-горе променливата i приема стойности от 1 до 10 и в тялото на цикъла се отпечатва текущата стойност. Цикълът се повтаря 10 пъти и всяко от тези повторения се нарича "итерация".

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Посочете коя среда за разработка на кой програмен език съответства?

За програмиране на езика Python: → PyCharm, 
За програмиране на езика Java: → IntelliJ IDEA, 
За програмиране на езика C#: → Visual Studio

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Дайте пример за конзолна програма, която чете цяло число, въведено от потребителя, и печата дали е четно ("even") или нечетно ("odd").

using System;
namespace ConsoleApp30

{
    class Program
    {
        static void Main(string[] args)
        {
            var num = int.Parse(Console.ReadLine());
            if (num % 2 == 0)
            {
                Console.WriteLine("Even");
            }else
            {
                Console.WriteLine("Odd");
            }
        }
    }


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Посочете какво означава терминът инициализация?
Изберете едно
a. Задаване на типа на променливата.
b. Задаване на начална стойност.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
c. Задаване на името на променливата. 
d. Нито едно от изброените.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Интерпретаторът има за задача в [реално време] да преведе код, написан на високо ниво (най-често на динамичен език) до [машинен код] или код за виртуална машина.

Интерпретаторът е "[програма] за изпълняване на програми", написани на някакъв програмен език. Той изпълнява командите на програмата [ една след друга], 
като разбира не само от единични команди и поредици от команди, но и от другите езикови конструкции (проверки, повторения, функции и т.н.).

Езици, които работят с интерпретатор се изпълняват без да се компилират. Поради липса на предварителна [компилация], при [интерпретеруемите ] езици грешките се откриват [по време на изпълнение], 
след като програмата започне да работи, а не [предварително].


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Дайте пример за конзолна програма, която чете от конзолата страна и височина на триъгълник, въведени от потребителя, и пресмята неговото лице. 
Използвайте формулата за лице на триъгълник: area = a * h / 2. Закръглете резултата до 2 знака след десетичната точка.

using System;
namespace ConsoleApp1

{
    class Program
    {
        static void Main(string[] args)
        {
            double a = double.Parse(Console.ReadLine());
            double h = double.Parse(Console.ReadLine());
            double area = a * h / 2;
            Console.WriteLine(area);
            Math.Round(area, 2);

        }
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Показан е следния програмен код на C#. Каква е целта на програмата? Посочете верния отговор.



Изберете едно
a. Намира всички числа в интервала [1 … 1000], които се делят на 10 и ги отпечатва на конзолата.
b. Намира всички числа в интервала [1 … 1000], които се делят на 7 и ги отпечатва на конзолата.
c. Намира всички числа в интервала [1 … 1000], които завършват на 7 и ги отпечатва на конзолата. <<<<<<<<<<<<<<<<<<<<<<<<<<<
d. Намира всички числа в интервала [1 … 1000], които са равни на 7 и ги отпечатва на конзолата.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Показан е следният програмен фрагмент на C#. Обобщете какъв ще бъде резултатът от изпълнението на програмата?



Изберете едно
a. Програмата прочита едно целочислено число. След което цикълът отпечатва числата от 1 до това число n в обратен ред, като всяко едно от числата се отпечатва на отделен ред. <<<<<<<<<<<<<<<<<<<<<<<
b. Програмата прочита едно реално число. След което цикълът отпечатва числата от 1 до това число n, като всяко едно от числата разделено от интервал.
c. Програмата прочита едно целочислено число. След което цикълът отпечатва числата от 1 до това число n, като всяко едно от числата се отпечатва на отделен ред.
d. Програмата прочита едно реално число. След което цикълът отпечатва числата от 1 до това число n, като всяко едно от числата се отпечатва на отделен ред.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Дефинирайте понятието "цикли" в програмирането. Избройте видовете цикли в C#.

Конструкции за повторение на група команди, известни в програмирането с понятието "цикли".

В програмирането често пъти се налага да изпълним блок с команди няколко пъти. За целта се използват т.нар. цикли.

Примери: for, while, do-while, foreach.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Дефинирайте понятието език за програмиране.

Езикът за програмиране е предназначен за задаване на команди, които искаме компютърът да прочете, обработи и изпълни. 
Чрез езиците за програмиране пишем поредици от команди (програми), които задават какво да прави компютъра. Изпълнението на компютърните програми може да се реализира с компилатор или с интерпретатор.
Съществуват различни видове езици за програмиране. 
С езици от високо ниво като C#, Python и JavaScript се създават приложни програми, например програма за четене на поща или чат програма.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Обяснете в каква последователност ще се изпълни програмата, когато имаме серия от проверки като на примера по-долу?


Изберете едно
a. Последователно сравнява входното число от конзолата с цифрите от 1 до 9, като всяко следващо сравнение се извършва независимо от предходното сравнение дали е било истина. Ако никое от if условията не е изпълнено, се изпълнява последната else клаузa.

b. Последователно сравнява входното число от конзолата с цифрите от 1 до 9, като всяко следващо сравнение се извършва, само в случай че предходното сравнение не е било истина. Като последната else клаузa се изпълнява винаги.

c. Последователно сравнява входното число от конзолата с цифрите от 1 до 9, като всяко следващо сравнение се извършва, само в случай че предходното сравнение не е било истина. 
Ако никое от if условията не е изпълнено, се изпълнява последната else клаузa.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


Посоченият по-долу фрагмент на C# събира числото 0.00001 общо 100000 пъти. Очакваният резултат от това е 1. При изпълнение се получава резултат 0.999999999998084. Как ще промените програмата, така че да се поправи тази изчислителна грешка?


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Посоченият по-долу фрагмент на C# събира числото 0.00001 общо 100000 пъти. Очакваният резултат от това е 1.
При изпълнение се получава резултат 0.999999999998084. Как ще промените програмата, така че да се поправи тази изчислителна грешка?

Изберете едно
a. Чрез използване на тип long вместо double и добавянето на суфикс l след изписването на 0 и 0.00001.
b. Чрез подходящо закръгляне на получения резултат.
c. Чрез използване на тип float вместо double и добавянето на суфикс f след изписването на 0 и 0.00001.
d. Чрез използване на тип decimal вместо double и добавянето на суфикс M след изписването на 0 и 0.00001.<<<<<<<<<<<<<<<<<<<<<

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Посочете кое от изброените НЕ е вярно за стойностните типове данни?

Изберете едно

a. Стойностните типове данни съдържат в стека за изпъл­нение на програмата референция (адрес) към динамичната памет (heap).<<<<<<<<<<<<<<<<<<<<<
b. Стойностни са примитивните числови типове, символният тип и булевият тип: sbyte, byte, short, ushort, int, long, ulong, float, double, decimal, char, bool.
c. Стойностните типове данни се съхраняват в стека за изпъл­нение на програ­мата и съдържат директно стойността си.
d. Стойностните типове данни се освобождават при излизане от обхват, т.е. когато блокът с код, в който са дефинирани, завърши изпълнението си.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Посочете какво означава живот на променливата или т.нар. variable scope в езика C#?
Изберете едно
a. Живот на променливата означава, че тя има обхват, който уточнява къде може да бъде използвана тази променлива.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
b. Живот на променливата означава, че независимо къде сме дефинирали дадена променлива, ние можем да използваме тази променлива, стига да е в обхвата на нашия .cs файл.
c. Живот на променливата означава, че тази променлива можем да я създадем и когато вече не ни е нужна да я изтрием от паметта.
d. Всичко от изброеното е вярно.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Компютърната програма е:

Изберете едно
a. Всичко от изброеното.<<<<<<<<<<<<<<<<<<<<<<<<<<<<
b. Програмата се пише в текстов формат, а самият текст на програмата се нарича сорс код (source code). Той се компилира до изпълним файл или се изпълнява директно.
c. Описва поредица от пресмятания, проверки, повторения и всякакви подобни операции, които целят постигане на някакъв резултат.
d. Поредица от команди, които се изписват на предварително избран език за програмиране


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Открийте начините, по които се стартира проект във VisualStudio среда.

Изберете едно или повече:
a. С бутона за стартиране  HelloWorld<<<<<<<<<<<<<<<<<<<<
b. С клавишната комбинация Ctrl + F10
c. С клавишната комбинация Ctrl + Shift + F5
d. С клавишната комбинация Shift + F5
e. С клавишната комбинация Ctrl + F5<<<<<<<<<<<<<<<<<<<<
f. С клавишната комбинация Ctrl + Shift + F10

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Правилният отговор е: Поставете думите на празните места, така че да се получи правилно понятието за програмиране.
Програмиране означава да даваме [команди ] на [компютъра] какво да прави.

Когато командите са няколко една след друга, те се наричат [компютърна] [програма].

Текстът на [компютърните програми] се нарича [програмен код] или сорс код.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Напишете метод на C#, който отпечатва на конзолата квадрат от звездички с размери nхn. Квадратът трябва да изглежда по следният начин:

public void PrintSquare(int n)
        {
            for (int i = 1; i <= n; i++)
            {
                for (int j = 1; j <= n; j++)
                {
                    Console.Write("* ");
                }
                Console.WriteLine();
            }
        }

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Даден е следният програмен код на C#. Открийте какъв ще бъде резултатът от изпълнението на програмата. В полето запишете очакваният резултат и защо се е получил този резултат?

tomato lemon. Когато имаме само една команда в тялото на if конструкцията, можем да пропуснем къдравите скоби, обозначаващи тялото на условния оператор.
Когато искаме да изпълним блок от код (група команди), къдравите скоби са задължителни. 
В случай че ги изпуснем, ще се изпълни само първият ред след if клаузата.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Дайте пример за while цикъл в C#, който отпечатва числата от 1 до 10(включително), всяко на отделен ред.

int num = 1;
while (num <= 10)
{
       Console.WriteLine(num++);
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Дайте пример (напишете примерен код) за оператор за многовариантен избор (switch-case)  като използвате програмния език C#.


switch (селектор)
{
    case стойност1:
        конструкция;
        break;
    case стойност2:
        конструкция;
        break;
    default:
        конструкция;
        break;
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Дефинирайте понятието метод - Защо е добра практика да използваме методи? Как се декларират методи? Как се извикват методи? Какво са параметри на метод и връщана стойност?

Дефиниция:

Методите са парчета код, които са именувани от нас по определен начин и които могат да бъдат извикани толкова пъти, колкото имаме нужда.

Един метод може да бъде извикан толкова пъти, колкото ние преценим, че ни е нужно за решаване на даден проблем. 
Това ни спестява повторението на един и същи код няколко пъти, както и намалява възможността да пропуснем грешка при евентуална корекция на въпросния код.

Даден проблем може да бъде разделен на по-малки части, като това ни улеснява  да го решим, избягваме повторенията на код и ни предпазва от грешки, също така подобрява четимостта на кода.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Дефинирайте понятието алгоритъм.
Изберете едно
a. Управляват хардуера и изискват много усилия и огромен брой команди, за да свършат единица работа
b. Съвкупност от традиционни инструменти за разработване на софтуерни приложения.
c. Поредица от команди, необходими, за да се свърши определена работа.<<<<<<<<<<<<<<<<<<<<
d. Превежда кода от програмен език на машинен код.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Дефинирайте понятието среда за разработка (IDE).
Средата за програмиране (Integrated Development Environment - IDE, интегрирана среда за разработка) е:
Изберете едно
a. Нито едно от изброените.
b. съвкупност от традиционни инструменти за разработване на софтуерни приложения.<<<<<<<<<<<<<<<<<<<<<<<<
c. Изкуствен език, предназначен за задаване на команди, които искаме компютърът да прочете, обработи и изпълни.
d. превежда кода от програмен език на машинен код, като за всяка от командите в кода избира подходящ, предварително подготвен фрагмент от машинен код


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Дефинирайте понятието вложени цикли.


Вложените цикли представляват конструкция, при която в тялото на един цикъл (външен) се изпълнява друг цикъл (вътрешен). За всяко завъртане на външния цикъл, вътрешният се извърта целият. 
Това се случва по следния начин:

При стартиране на изпълнение на вложени цикли първо стартира външният цикъл: извършва се инициализация на неговата управляваща променлива и след проверка за край на цикъла, се изпълнява кодът в тялото му.
След това се изпълнява вътрешният цикъл. Извършва се инициализация на началната стойност на управляващата му променлива, прави се проверка за край на цикъла и се изпълнява кодът в тялото му.
При достигане на зададената стойност за край на вътрешния цикъл, програмата се връща една стъпка нагоре и се продължава започналото изпълнение предходния (външния) цикъл. 
Променя се с една стъпка управляващата променлива за външния цикъл, проверява се дали условието за край е удовлетворено и започва ново изпълнение на вложения (вътрешния) цикъл.
Това се повтаря докато променливата на външния цикъл достигне условието за край на цикъла.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Компилаторът има за задача да [преведе изходния код] (най-често написан на език от по-високо ниво) до [машинен код] или друг език от по-ниско ниво, 
като междувременно [проверява за грешки текста] на програмата.

Резултатът от неговото изпълнение представлява [изпълним файл], специфичен за дадена хардуерна и софтуерна платформа.

При компилируемите езици за програмиране компилирането на програмата се извършва задължително [преди ] нейното изпълнение и [по време] на компилация 
се откриват синтактичните грешки (грешно зададени команди).

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Посочете правилната стойност по подразбиране към всеки от типовете данни:

decimal → 0.0m, 
string → null, 
sbyte → 0, 
object → null, 
char → '\u0000',
bool → false, 
float → 0.0f

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Формулирайте правилно определението за условни конструкции.

Условните конструкции if и if-else представляват [тип условен контрол], чрез който програмата може да се държи [различно], 
в зависимост от [някакво условие], което се проверява по време на изпълнение на конструкцията.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Дефинирайте оператор за многовариантен избор (switch-case).

Когато работата на програмата ни зависи от стойността на една променлива, вместо да правим последователни проверки с множество if-else блокове, можем да използваме условната конструкция switch-case.
Конструкцията се състои от:
Селектор - израз, който се изчислява до някаква конкретна стойност. Типът на селектора може да бъде цяло число, string или enum.
Множество case етикети с команди след тях, завършващи с break.
Когато работата на програмата ни зависи от стойността на една променлива, вместо да правим последователни проверки с множество if-else блокове, можем да използваме условната конструкция switch-case.
Конструкцията се състои от:
Селектор - израз, който се изчислява до някаква конкретна стойност. Типът на селектора може да бъде цяло число, string или enum.
Множество case етикети с команди след тях, завършващи с break.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Посочете коя от променливите е правилно декларирана?
Изберете едно
a. bool isSunny = true;<<<<<<<<<<<<<<<<
b. string 123aaa = "some variable"
c. Нито едно от изброените.
d. int weight = 23.5;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

















