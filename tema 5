-------------------------------------------------------------------------------------

Посочете кое от твърденията е вярно за изключенията:



Изберете едно или повече:
a. Изключенията НЕ дават възможност необичайните събития да бъдат обработвани и програмата да реагира на тях по някакъв начин.
b. Изключенията са уведомление за дадено събитие, нарушаващо нормалната работа на една програма.<<<<<<<<<<<<<<<<<<<<<
c. Изключенията се предизвикват или "хвърлят" (throw an exception) от програмен код, който трябва да сигнализира на изпълняващата се прог­рама за грешка или необичайна ситуация. <<<<<<<<<<<<<<<<<<<<<<
d. Когато възникне изключение, конкрет­ното състояние на програмата се запазва и се търси обработчик на изключението (exception handler).<<<<<<<<<<<<<<<<<<<<

-------------------------------------------------------------------------------------

Имате даден следния програмен фрагмент:

int[] nums = { 1, 2, 3, 4, 5, 6 };
nums = nums[.Where(num => num % 2 != 0)].ToArray();

Коя от следните LINQ заявки и какъв ламбда израз ще използвате, за да филтрирате колекцията, така че тя да съдържа само нечетни числа?

-------------------------------------------------------------------------------------

Обяснете какво ще се случи, ако потребителя напише в конзолата 123. Също така какво ще се случи, ако потребителя реши да въведе Hello.

Console.WriteLine(number);
break;
}
catch (formatException ex)

Ако потребителя въведе цяло число, това число ще се отпечата на конзолата и изпълнението на програмата се прекратява. 

Когато потребителя въведе вход на конзолата различен от цяло число, програмата ще прихване изключението FormatException и
на конзолата ще се отпечата съобщение за грешка Input string was not in a correct format. Програмата се изпълнява докато потребителя въведе цяло число. 

-------------------------------------------------------------------------------------

Обяснете какво ще се случи и защо, ако потребителя въведе числото 2147483648:

Console.WriteLine(number);
break;
}
catch (formatException ex)

Ако потребителя въведе числото 2147483648 програмата ще хвърли изключение от типа System.OverflowException със следното съобщение за грешка: Value was either too large or too small for an Int32. 

Това се получава така, защото липсва catch клауза за прихващане на изключение от този тип.

-------------------------------------------------------------------------------------

Посочете, кое от дадените твърдения е вярно за потоците в C#. Трябва да изберете вярно или невярно от падащото меню срещу всяко твърдение.

Потоците се използват, когато програмата трябва да прочете или запише данни от или във външен източник на данни. [Вярно]

Потокът е наредена последователност от байтове. [Вярно]

Тези байтове се изпращат един след друг и могат да се получават в ред различен от този в който са били изпратени. [Невярно]

Потоците осигуряват последователен достъп до своите елементи. [Вярно]


Потоците трябва да се отворят преди употреба и да се затворят накрая. [Вярно]

Можем да манипулираме подредбата на данните в потока. [Невярно]

-------------------------------------------------------------------------------------

Имате следния код:

       public List<T> CreateList<T>(T item, int count)//2т
        {
            List<T> list = new List<T>();//2т
            for (int i = 0; i < count; i++)
            {
                list.Add(item);
            }
            return list;//2т
        }

 Модифицирайте кода,така че методът да работи с всякакъв тип данни.

-------------------------------------------------------------------------------------

Напишете програма на C#, която да дефинира делегат, който може да приема анонимна функция, която умножава две цели числа. Накрая резултатът да се отпечата на конзолата.

public delegate int Delegate(int firstNumber, int secondNumber);

    class Program
    {
        static void Main(string[] args)
        {
            Delegate del = new Delegate((x, y) => x *  y);
            Console.WriteLine(del(2, 3));
        }
    }

-------------------------------------------------------------------------------------

Дефинирайте понятието функция, като попълните липсващите думи в текста.

Функцията е [специално отношение], където на [всички входни данни] има [еднозначен изход].

-------------------------------------------------------------------------------------

Напишете програма, която въвежда  цели числа разделени с  ", ". Изведете  четните числа в множеството, сортирани в низходящ ред. 

Изберете какъв тип на структури от данни ще използвате за решаване на този проблем. Използвайте функционален програмен филтър, сортирайте и отпечатайте на конзолата колекцията от числа на един ред разделени с ", ".

За примерни входни/изходни данни ползвайте следните таблици:
Вход

Изход

Вход

Изход

Вход

Изход

4, 2, 1, 3, 5, 7, 1, 4, 2, 12

12, 4, 4, 2, 2
5, 3, 1
2, 4, 6
6, 4, 2


List<int> list = Console.ReadLine()
                .Split(", ", StringSplitOptions.RemoveEmptyEntries)
                .Select(int.Parse)
                .Where(x => x % 2 == 0)
                .OrderByDescending(x => x)
                .ToList();

            Console.WriteLine(string.Join(", ", list));

-------------------------------------------------------------------------------------

Посочете какво представлява и какво прави Current() от интерфейса IEnumerator:

Изберете едно
a. Current е свойството, което връща елемента от колекцията, който е на следващата позиция на итератора.
b. Current е свойството, което задава стойност на елемента от колекцията, който е на текущата позиция на итератора.
c. Current е свойството, което задава стойност на  елемента от колекцията, който е на следващата позиция на итератора.
d. Current е свойството, което връща елемента от колекцията, който е на текущата позиция на итератора.<<<<<<<<<<<<<<<<<<

-------------------------------------------------------------------------------------

Обяснете следния фрагмент от код с думи:

List<int> list = new List<int>() { 20, 15, 1, 5, 7, 18, 66 };

list.OrderByDescending(x => x).Skip(3).ToList();

Console.WriteLine(string.Join(" ", list));

В полето запишете ред по ред какво прави кода и какво се очаква да получим като резултат.

Инициализираме списък с цели числа.
Сортираме числата от колекцията в низходящ ред и пропускаме първите три числа от тях.
Очакван резултат: 20, 15, 1, 5, 7, 18, 66
Списъкът с числа си остава същия, защото linq изразите връщат нов списък, а в дадения код не се презаписва новата подредба на числата върху предишния списък с числа.

-------------------------------------------------------------------------------------

На конзолата ще ви бъдат подадени цели числа записани на един ред и разделени с интервал. Например: 5 7 12 56 24 3 8 

Напишете собствена функция на C# за парсване на цели числа. Запишете числата в подходяща структура от данни, след което отпечатайте числата на конзолата на един ред разделени със запетая и интервал.

string input = Console.ReadLine();
Func<string, int> parser = (x) => int.Parse(x);
int[] nums = input.Split().Select(parser).ToArray();
Console.WriteLine(string.Join(", ", nums));

-------------------------------------------------------------------------------------

Дайте пример за функция, която проверява дадено цяло число X дали е четно или нечетно. След изпълнението на функцията, на конзолата да се отпечата като резултат само Even или Odd.

Func<int, bool> oddOrEven = (x) => x % 2 == 0;

Console.WriteLine(oddOrEven(5) ? "Even" : "Odd");

-------------------------------------------------------------------------------------

Обяснете следния фрагмент от код с думи:
List<int> list = new List<int>() { 20, 15, 1, 5, 7, 18, 66 };
list.OrderByDescending(x => x).Take(3);
Console.WriteLine(string.Join(", ", list));

В полето запишете ред по ред какво прави кода и какво се очаква да получим като резултат.

Инициализираме списък с цели числа.
Сортираме числата от колекцията в низходящ ред и вземаме първите три числа от тях.
Очакван резултат: 20, 15, 1, 5, 7, 18, 66
Списъкът с числа си остава същия, защото OrderByDescending връща нов IOrderedEnumerable списък, а в дадения код не се презаписва новата подредба на числата върху предишния списък с числа.

-------------------------------------------------------------------------------------

Направете сравнение между IEnumerable и IEnumerator, като поставите липсващите думи в текста:

IEnumerable [не може да запази] текущото състояние на курсора, но IEnumerator [може да запази].
IEnumerable показва [изброен обект (enumerated object)], докато IEnumerator има [for each израз].
IEnumerable използва [абстрактен начин на писане], но IEnumerator използва [конкретен начин на писане].

-------------------------------------------------------------------------------------

Имате даден следния програмен фрагмент:

int[] nums = { 1, 2, 3, 4, 5, 6};

int count = nums[.Count(num => num % 2 == 0);]

Коя от следните LINQ заявки и какъв ламбда израз ще използвате, за да намерите броя на четните числа в колекцията?

-------------------------------------------------------------------------------------

Решете правилно задачата. Имате дадени парчета от код, поставете отделните парчета така, че да получите правилно работещ код, който трябва да прочете данните от един файл и да ги копира в друг.

[using (var source = new FileStream("../../../Image.jpg", FileMode.Open)) {]

[using (var destination = new FileStream("../../../ImageCopy.jpg", FileMode.Create)) {]

[byte[] buffer = new byte[1024];]

[ while (true) {]

[int readBytes = source.Read(buffer, 0, buffer.Length);]

[if (readBytes == 0) break;]

[destination.Write(buffer, 0, readBytes);]

[} } }]

-------------------------------------------------------------------------------------

Имате даден следния програмен фрагмент:

int[] nums = { 1, 2, 2, 3, 4, 5, 6, -2, 2, 0, 15, 3, 1, 0, 6 };

nums = nums[.Distinct()].ToArray();

Коя от следните LINQ заявки ще използвате, за да филтрирате колекцията, така че тя да съдържа само уникални елементи?

-------------------------------------------------------------------------------------


Имате следния код:

    public class Scale<T> where T : IComparable<T>//2т
    {
        private T left; //1т
        private T right; //1т

        public Scale(T left, T right)//2т
        {
            this.left = left;
            this.right = right;
        }
        public T GetHavier()
        {
            if (left.CompareTo(right) > 0)
            { return left; }
            else if (left.CompareTo(right) < 0)
            { return right; }
            return default(T);
        }
    }

Модифицирайте кода,така че Везната да може да сравнява всякакви типове данни. Също така трябва да ограничите Везната, че елементите, които ще  сравнява ще бъдат само сравними типове. 


-------------------------------------------------------------------------------------

Напишете програма на C#, която да дефинира делегат, който може да приема метод, който сумира две реални числа. Накрая резултатът да се отпечата на конзолата.

public delegate double SumDelegate(double firstNumber, double secondNumber);
    class Program
    {
        static void Main(string[] args)
        {
            SumDelegate del = new SumDelegate(Sum);
            Console.WriteLine(del(2.5, 3.14));
        }

        private static double Sum(double firstNumber, double secondNumber)
        {
            return firstNumber + secondNumber;
        }
    }
    
  -------------------------------------------------------------------------------------
  
Формулирайте правилната дефиниция за IEnumerator, като поставите липсващите думи в текста:

Предоставя [последователно, еднопосочно обхождане на колекция от произволен тип].
IEnumerator има следните методи: [Reset();, MoveNext();].
IEnumerator притежава свойството: [Current();].
След като имплементираме методите и свойството, можем да използваме [foreach() цикъл] за нашите User Defined Classes.

-------------------------------------------------------------------------------------
  
Дефинирайте какво представляват Lambda изразите и какъв е техният синтаксис, като попълните липсващите думи в текста.

Ламбда изразите представляват [анонимни функции], които съдържат изрази или последователност от оператори. 
Всички ламбда изрази използват ламбда оператора [=>], който може да се чете като "отива в". 
Лявата страна на ламбда оператора определя [входните параметри], а дясната страна представлява [израз или последователност от оператори], 
която работи с [входните параметри] на [анонимната функция] и евентуално връща някакъв резултат.

Ламбда синтаксис: [(параметри) => {тяло}]

-------------------------------------------------------------------------------------

На конзолата ще ви бъдат подадени реални числа записани на един ред и разделени с интервал. Например: 5.12 7.17 1.2 5.16 24.1 3 8 

Напишете собствена функция на C# за парсване на реални числа. 
Запишете числата в подходяща структура от данни, след което отпечатайте числата на конзолата на един ред разделени със запетая и интервал.

string input = Console.ReadLine();
Func<string, double> parser = (x) => double.Parse(x);
double[] nums = input.Split().Select(parser).ToArray();
Console.WriteLine(string.Join(", ", nums));

-------------------------------------------------------------------------------------

Обяснете следния фрагмент от код с думи:
int[] nums = { 1, 2, 3, 4, 5, 6 };
int[] otherNums = { 7, 8, 9, 0 };
nums = nums.Concat(otherNums);
Console.WriteLine(string.Join(", ", nums));
В полето запишете ред по ред какво прави кода и какво се очаква да получим като резултат.

Инициализираме масив от цели числа nums и друг масив от цели числа otherNums.
Конкатенираме (или слепваме) двата масива - масив otherNums се "залепя" след масива nums.
Отпечатваме на конзолата елементите от масива на един ред разделени със ", ". 
Очакван резултат:
1, 2, 3, 4, 5, 6, 7, 8, 9, 0

-------------------------------------------------------------------------------------


Обяснете следния фрагмент от код с думи:
int[] nums = { 1, 2, 3, 4, 5, 6};
nums = nums.Reverse();
Console.WriteLine(string.Join(", ", nums));
В полето запишете ред по ред какво прави кода и какво се очаква да получим като резултат.

Инициализираме масив от цели числа.
Обръщаме подредбата на числата (отзад-напред) с  (nums.Reverse) и запазваме новата подредба на масива nums.
Отпечатваме на конзолата елементите от масива на един ред разделени със ", ". 
Очакван резултат: 6, 5, 4, 3, 2, 1


-------------------------------------------------------------------------------------

Решете правилно задачата. Имате дадени парчета от код, поставете отделните парчета така, че да получите правилно работещ код, който трябва да прочете данните от един файл и да ги копира в друг.

[using (var reader = new StreamReader("../../../Program.cs")) {]

[using (var writer = new StreamWriter("../../../Copy.cs")) {]

[string line = reader.ReadLine();]

[while (line != null) {]

[writer.WriteLine(line);]

[line = reader.ReadLine();]

[} } }]

-------------------------------------------------------------------------------------

Посочете кой от изброените класове е базовия клас за потоците в C#.

Изберете едно
a. Stream<<<<<<<<<<<<<<<<<<<<<<
b. FileStream
c. BaseStream
d. DataStream

-------------------------------------------------------------------------------------

Дайте пример за функция, която проверява дадено число X дали е по-малко от числото 10. След изпълнението на функцията на конзолата да се отпечата като резултат само True или False.

Func<int, bool> func = (x) => x < 10;

Console.WriteLine(func(5));


-------------------------------------------------------------------------------------

Посочете кое от изброените твърдения е вярно за работата на изключенията в C#.

Изберете едно
a. По време на изпълнението на програмата никой от извикваните методи не може да хвърли изключение.
b. Ако по време на изпълнението на програмата някой от извикваните методи неочаквано хвърли изключение, то нормалният ход на програмата се преустановява. <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
c. Нито едно от изброените.
d. Ако по време на изпълнението на програмата някой от извикваните методи неочаквано хвърли изключение, но нормалният ход на програмата си продължава. 

-------------------------------------------------------------------------------------

Направете сравнение между двата интерфейса IComparable и IComparer, като изберете липсващите думи в текста:

Интерфейсът IComparable<T> казва [„Аз съм нещо сравнимо“] и [дава метод за сравняване на два обекта].
Интерфейсът IComparer<T> казва [„Аз мога да сравнявам“] и [предоставя начин за промяна на реда на сортиране на колекция].

-------------------------------------------------------------------------------------

Посочете какво представлява и какво прави MoveNext() от интерфейса IEnumerator:

Изберете едно
a. MoveNext е метод, който връща булева стойност, която посочва крайния елемент на списъка.<<<<<<<<<<<<<<<<<<<<<<
b. MoveNext() е метод, който се използва за внедряване на интерфейса IEnumerable.
c. MoveNext() е метод, който се използва за внедряване на интерфейса IEnumerator.
d. MoveNext() е интерфейс, който се изпълнява от изброим клас.

-------------------------------------------------------------------------------------

Имате следния примерен код:

    class Person
    {
        private int age;

        public int Age
        {
            get { return age; }
            private set 
            { 
                if(value < 0)
                {
                    [throw new ArgumentOutOfRangeException("Age must be positive number!");]
                }
                age = value;
            }
        }
    }

По какъв начин ще хвърлите изключение, че числото, което е въведено е невалидно?

-------------------------------------------------------------------------------------

Дайте пример за имплементация на интерфейса IEnumerable<T> в C#.

class MyList<T> : IEnumerable<T>
    {
        private T[] items;
        public int Count { get; private set; }        

        public IEnumerator<T> GetEnumerator()
        {
            for (int i = 0; i < this.Count; i++)
            {
                yield return this.items[i];
            }
            //foreach (T item in this.items)
            //{
            //    yield return item;
            //}
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
}

-------------------------------------------------------------------------------------

Опишете какво представляват референциите към функции/методи в C#, като поставите липсващите думи в текста:

Ламбда функциите могат да бъдат записани в променливи от тип [делегат]. [Делегатите ] представляват специален тип [променливи], 
които съдържат [функции]. Типовете Func и Action са [generic ] и съдържат: на последна позиция [типа на връщаната стойност], 
а на първите позиции се задават [типовете на параметрите] на функциите. Променливите от тези типове са [референции] към функции. 

-------------------------------------------------------------------------------------

Имате следното парче код:

List<int> list = new List<int>() {20, 15, 1, 5, 7, 18, 66};

list.FindAll(x => (x % 2) != 0)

Какво ще се случи след изпълнението на програмата? Ще се изведе ли нещо като резултат и какъв ще бъде той? Запишете вашия отговор в полето.

Правилният отговор е: На конзолата ще се отпечатат всички нечетни числа. 15 1 5 7

-------------------------------------------------------------------------------------

Имате даден следния програмен фрагмент:

int[] nums = { 11, 99, 33, 55, 77, 44, 66, 22, 88 };

nums = nums[.OrderBy(x => x)].ToArray();
Коя от следните LINQ заявки ще използвате, за да подредите числата в колекцията във възходящ ред?

-------------------------------------------------------------------------------------

На конзолата ще ви бъдат подадени цели числа записани на един ред и разделени с интервал. Например: 5 7 12 56 24 3 8 
Напишете собствена функция на C#, която да намира сумата на тези числа. 
Накрая отпечатайте сбора на числата.

 string input = Console.ReadLine();
            int[] nums = input.Split().Select(int.Parse).ToArray();
            Func<int[], int> sum = (x) =>
            {
                int sum = 0;
                foreach (var item in x)
                {
                    sum += item;
                }
                return sum;
            };
            Console.WriteLine(sum(nums));

-------------------------------------------------------------------------------------

Дефинирайте IEnumerable. Какво представлява, какво съдържа и за какво се използва?

Основен интерфейс в .NET, позволяващ просто обхождане на колекция.
Съдържа един-единствен метод GetEnumerator(), който връща един IEnumerator<T>.
Клас, реализиращ IEnumerable<T> може да бъде използван за обхождане с цикъла foreach.

-------------------------------------------------------------------------------------

Напишете програма, която въвежда  цели числа разделени с  ", ". Изведете  нечетните числа в множеството, сортирани в нарастващ ред. 
Изберете какъв тип на структури от данни ще използвате за решаване на този проблем. Използвайте функционален програмен филтър, сортирайте и отпечатайте на конзолата колекцията от числа на един ред разделени с ", ".
За примерни входни/изходни данни ползвайте следните таблици:
Вход
4, 2, 1, 3, 5, 7, 1, 4, 2, 12
Изход
1, 1, 3, 5, 7
Вход
5, 3, 1
Изход
1, 3, 5
Вход
2, 4, 6
Изход



List<int> list = Console.ReadLine()
                .Split(", ", StringSplitOptions.RemoveEmptyEntries)
                .Select(int.Parse)
                .Where(x => x % 2 != 0)
                .OrderBy(x => x)
                .ToList();

            Console.WriteLine(string.Join(", ", list));

-------------------------------------------------------------------------------------

Направете сравнение между IEnumerable и IEnumerator, като поставите липсващите думи в текста:

IEnumerable се използва за [generic интерфейс], но IEnumerator се използва за [non‑generic интерфейс].
IEnumerable има [само един метод], докато IEnumerator има [само два метода].
IEnumerable [може да върне IEnumerator]. IEnumerator [не може да върне IEnumerable].

-------------------------------------------------------------------------------------

Обяснете какво ще се случи и защо, ако потребителя въведе числото 2147483648: 

while (true)
{
 try
 {
     int number = int.Parse(Console.ReadLine());
     Console.WriteLine(number);
     break;
     }
     catch (FormatException ex)
     
    Ако потребителя въведе числото 2147483648 програмата ще хвърли изключение от типа System.OverflowException със следното съобщение за грешка: Value was either too large or too small for an Int32. 
Това се получава така, защото липсва catch клауза за прихващане на изключение от този тип.

-------------------------------------------------------------------------------------

Опишете какво представляват референциите към функции/методи в C#, като поставите липсващите думи в текста:

Ламбда функциите могат да бъдат записани в променливи от тип [делегат]. [Делегатите ] представляват специален тип [променливи], които съдържат [функции]. Типовете Func и Action са [generic ] и съдържат: 
на последна позиция [типа на връщаната стойност], а на първите позиции се задават [типовете на параметрите] на функциите. Променливите от тези типове са [референции] към функции. 

-------------------------------------------------------------------------------------

Имате даден следния програмен фрагмент:

int[] nums = { 1, 2, 3, 4, 5, 6 };
nums = nums[.Where(num => num % 2 == 0)].ToArray();

Коя от следните LINQ заявки и какъв ламбда израз ще използвате, за да филтрирате колекцията, така че тя да съдържа само четни числа?

-------------------------------------------------------------------------------------
Имате следното парче код:

List<int> list=new<int>() {1, 2, 3, 4, 5, 6 );

list.FindAll(x => (x % 2) == 0)
  .ForEach(x => Console.Write($"{x} "));

Какво ще се случи след изпълнението на програмата? Ще се изведе ли нещо като резултат и какъв ще бъде той? Запишете вашият отговор в полето.

Правилният отговор е: На конзолата ще се отпечатат всички четни числа. 2 4 6

-------------------------------------------------------------------------------------

Напишете програма, която филтрира списък с имена по тяхната дължина. На първия ред ще ви бъде дадено цяло число n, представляващо дължина на име. 
На втория ред ще ви бъде дадени някои имена като символни низове, разделени с интервал.

using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        int length = int.Parse(Console.ReadLine());
        List<string> names = Console.ReadLine().Split().ToList();

        List<string> filteredNames = FilterNamesByLength(names, length);
        PrintNames(filteredNames);
    }

    static List<string> FilterNamesByLength(List<string> names, int maxLength)
    {
        List<string> filteredNames = names.Where(name => name.Length <= maxLength).ToList();
        return filteredNames;
    }

    static void PrintNames(List<string> names)
    {
        foreach (string name in names)
        {
            Console.WriteLine(name);
        }
    }
}

-------------------------------------------------------------------------------------












































































































































































































































































































































