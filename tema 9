----------------------------------------------------------------------

Посочете резултата от изпълнението на следната заявка: 

UPDATE employees

SET salary = salary*1.10

WHERE department_id = 7;

Изберете едно
a. Ще промени таблицата, като стойността на заплатата ще бъде променена.
b. Ще промени таблицата, като стойността на заплатата ще бъде променена на служител с номер 7.
c. Ще промени таблицата, като стойността на заплатата ще бъде променена само на записите, които са с номер на отдел 7.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

----------------------------------------------------------------------

Във вашата база от данни Soft_uni имате създадена таблица Employees с 500 записа. Необходимо е да добавите нова колона с име salary. Напишете заявка за добавяне на колоната в таблица employees. 

ALTER TABLE employees
ADD COLUMN salary DECIMAL(10, 2);

----------------------------------------------------------------------

Посочете резултата от изпълнението на следната заявка:

SELECT first_name, last_name, salary FROM employees;

Изберете едно
a. Извлича първо име и фамилия и заплата на служителите<<<<<<<<<<<<<<<<<<<<<<<<
b. Извлича първо име и фамилия на служителите
c. Извлича първо име и фамилия и най-ниската заплата на служителите
d. Извлича първо име и фамилия и най - високата заплата на служителите

----------------------------------------------------------------------

Посочете верния изход при изпълнение на следната заявка.

SELECT * FROM employees AS e

  JOIN departments AS d ON d.department_id = e.department_id


Изберете едно
a. Таблица employees ще се преименува на d, а таблица departments ще се преименува на e и по този начин ще се осъществи връзката между двете таблици по свързващото условие колона salary
b. Таблица employees ще се преименува на е, а таблица departments ще се преименува на d и по този начин ще се осъществи връзката между двете таблици по свързващото условие колона department_id<<<<<<<<<<<<<<<<<<<<<<<
c. таблица employees ще се преименува на е, а таблица departments ще се преименува на d и по този начин ще се осъществи връзката между двете таблици по свързващото условие колона employee_id

----------------------------------------------------------------------

Посочете резултата от изпълнението на следната заявка:

SELECT employee_id AS id, first_name, last_name

  FROM employees;


Изберете едно
a. Заявката е некоректно написана.
b. Колоната employee_id ще се преименува на id.<<<<<<<<<<<<<<<<<<<<<<<
c. Таблица employees ще се преименува на е.

----------------------------------------------------------------------

Дефинирайте понятието псевдоним в базите от данни и посочете за какво се използва.

В базите от данни, псевдонимът е алтернативно име, което се задава на стълбец, таблица или израз във въпросна заявка. 
Той се използва за улесняване на четимостта и разбираемостта на заявката, като предоставя по-кратко и описателно име на елементите в базата данни.

----------------------------------------------------------------------

Посочете резултата от изпълнение на следната заявка: 

SELECT * from projects WHERE end_date IS NULL;

Изберете едно
a. Извежда всички колони от таблицата и само тези записи, които не са NULL в колоната крайна дата.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
b. Извежда колона крайна дата от таблицата и само тези записи, които са NULL в колоната крайна дата.
c. Извежда всички колони от таблицата и само тези записи, които са NULL от всички колони.
d. Извежда всички колони от таблицата и само тези записи, които са NULL в колоната крайна дата.

----------------------------------------------------------------------

Създайте таблица cities, която да съдържа две колони - id и name, като прецените типа данни, който да укажете за двете колони. Колоната id да бъде първичен ключ.

CREATE TABLE cities (
  id INT PRIMARY KEY,
  name VARCHAR(255)
);


----------------------------------------------------------------------

Имате представена подзаявка за намиране служителите от отдел финанси и извеждане на всички колони от таблицата. Поставете липсващите думи, за да направите работещ код.

SELECT * FROM employees
[WHERE] department_id [IN]
(
SELECT department_id
[FROM] departments
[WHERE] name = 'Finance'
);

----------------------------------------------------------------------

В база от данни People имате таблица persons, състояща се от 4 колони и те са следните:

PersonID int NOT NULL,

FirstName varchar(25) NOT NULL,

email VARCHAR(10),

 Age int );

В таблицата имате достатъчен брой записи, които не трябва да загубите. Вашият мениджър ви поставя задача да промените броя на символите на колоната е-мейл, като ги увеличите на 100. Напишете заявка за промяна на колоната и съответно на таблицата persons.


ALTER TABLE persons
MODIFY email VARCHAR(100);

----------------------------------------------------------------------

Допишете следната заявка, така че да изведе служителите със заплати между 20000 и 30000.

SELECT `last_name`, `salary` FROM `employees`

SELECT `last_name`, `salary` FROM `employees` WHERE `salary` BETWEEN 20000 AND 30000;


----------------------------------------------------------------------

Посочете правилния код за създаване на заявка, която извлича всички записи от таблицата.

Изберете едно
a. SELECT name FROM departments;
b. SELECT DISTINCT salary FROM employees;
c. няма верен отговор
d. SELECT * FROM departments;<<<<<<<<<<<<<<<<<<<<<<<<<<

----------------------------------------------------------------------

Изберете липсващите думи в следната заявка, така че да получите служителите със заплата по-голяма от 50000.

[SELECT] e.employee_id, e.first_name, e.salary, d.name [FROM] employees AS e
JOIN departments AS d ON d.department_id = e.department_id
[WHERE] e.salary > 50000
[ORDER BY] d.department_id DESC;

----------------------------------------------------------------------

Посочете резултата от изпълнението на следната заявка:

UPDATE employees

set last_name = 'Dani'

WHERE employee_id = '1';



Изберете едно
a. Ще промени таблицата и на служител с име Dani ще добави номер на служител 1.
b. Ще промени таблицата и на колоната фамилно име на служител с номер 1 ще присвои име Dani.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
c. Ще добави в таблицата ново име в колоната за фамилно име.
d. Ще изтрие от таблицата името Dani.

----------------------------------------------------------------------

Имате дадена ER диаграма. Информацията в таблиците е въведена предварително. След като анализирате данните в базата от данни colonial_journey, създайте следните заявки. Съобразете се с посочените примери.

SELECT * FROM travel_cards
ORDER BY card_number ASC;

SELECT CONCAT(first_name, ' ', last_name) AS full_name, id FROM colonists
ORDER BY full_name ASC, id ASC;

SELECT spaceship_name, destination_name FROM spaceships
JOIN destinations ON spaceships.destination_id = destinations.id
ORDER BY speed DESC
LIMIT 1;

----------------------------------------------------------------------

Следната заявка извлича от таблица projects колоната с крайна дата на проекти, която е NULL

UPDATE projects

   SET end_date = '2017-05-29'

 WHERE end_date IS NULL;


Изберете едно:
Истина<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Неистина

----------------------------------------------------------------------

Пояснете какво прави връзката RIGHT OUTER JOIN.

RIGHT OUTER JOIN е вид операция за свързване на таблиците в база данни. При използването на RIGHT OUTER JOIN, всички редове от дясната (втората) таблица се запазват, 
а съвпадащите редове от лявата (първата) таблица се включват в резултата. Ако няма съвпадения между двата набора от данни, стойностите на лявата таблица се задават като NULL в резултата.

----------------------------------------------------------------------

В дадения код имате обединяване на заявки чрез клаузата UNION. 
Попълнете чрез влачене липсващите думи в кода, така че да получите работеща заявка, която да извежда данни от база от данни geography и да сортира колона name.


(select river_name as name [FROM] rivers)
  UNION
([SELECT] mountain_range as name from mountains)
[ORDER BY] name ASC
LIMIT 100

----------------------------------------------------------------------

Следната заявка ще изтрие всички записи от таблицата.

DELETE FROM `employees`

WHERE `employee_id` = 1;

Изберете едно:
Истина
Неистина<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

----------------------------------------------------------------------

Посочете какво прави клаузата INNER JOIN:

Клаузата INNER JOIN се използва за съединяване на редове от две или повече таблиците в резултатен набор на базата на общи стойности в свързващите колони между тях. 
Тя връща само редовете, за които има съответствие във всички свързани таблиците. Използвайки INNER JOIN, резултатът ще включва само редове, за които условието на свързване е изпълнено в двете таблиците.

----------------------------------------------------------------------

Посочете верния отговор за създаване на заявка, която извлича името на отдела от таблицата.

Изберете едно
a. няма верен отговор
b. SELECT * FROM departments;
c. SELECT name FROM departments;<<<<<<<<<<<<<<<<<<<<<<<<<<<
d. SELECT peak_name  FROM peaks ORDER BY peak_name;

----------------------------------------------------------------------

Посочете какво прави клаузата FULL JOIN.

Клаузата FULL JOIN се използва за обединяване на резултатите от две таблиците, като включва всички редове от двете таблиците,
където съвпадат стойностите на свързващите колони, и включва NULL стойности за неподходящите редове. Това означава,
че FULL JOIN връща комбинацията на редовете от лявата и дясната таблица, като включва и редовете, които не съвпадат. Ако няма съвпадения между двата реда, се добавят NULL стойности за липсващите данни.

----------------------------------------------------------------------

В така представения код има допуснати пропуски. Поправете кода и го представете, така че да извежда най-ниско платените служители от таблицата.

SELECT e.first_name, e.last_name, e.salary 

employees e

WHERE e.salary = 

  (

SELECT salary FROM employees ASC salary LIMIT 1

);


ПРАВИЛЕН ОТГОВОР: 

SELECT e.first_name, e.last_name, e.salary 
FROM employees e
WHERE e.salary = (
  SELECT MIN(salary) FROM employees
);

----------------------------------------------------------------------

Като е използвана базата данни soft_uni, е създадена заявка за намиране на тримата служители с най-висока заплата от отдел 'Information Services'.  
Моля, поставете думите в текста на заявката, за да получите работещ коректно код.

SELECT e.employee_id, e.first_name, e.salary, d.name 
FROM employees AS e
[JOIN] departments AS d ON d.department_id = e.department_id
WHERE d.name = 'Information Services' [ORBER BY] salary [LIMIT] 30000;
























































































































































































































































































































































































