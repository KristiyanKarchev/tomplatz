-------------------------------------------------------------------------------------

Обяснете как може да използвате снипети във Visual Studio.

Снипетите в Visual Studio са малки фрагменти от предварително написан код, които могат да се вмъкват автоматично в редактора чрез използване на специални скоростни клавиши или команди. 
Те улесняват и ускоряват процеса на писане на код, като предоставят готови шаблони за често използвани конструкции или структури.

Използване на вградени снипети: Visual Studio предлага голям набор от вградени снипети за различни езици и платформи. 
За да използвате вграден снипет, просто запишете неговия кодов символ (например cw за Console.WriteLine) и натиснете Tab два пъти. Снипетът ще се вмъкне на текущата позиция в редактора.

-------------------------------------------------------------------------------------

Посочете какво означава абревиатурата IDE:

Изберете едно
a. Instant Document Exchange
b. Internet Development Environment
c. Integrated Development Environment<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
d. Internal Development Environment

-------------------------------------------------------------------------------------

Дайте пример за употреба на снипети във Visual Studio.

Използване на вграден снипет:
Предположете, че пишете код на C# и искате да вмъкнете снипета за извеждане на съобщение в конзолата с помощта на Console.WriteLine.

Въведете във вашето солюшън следния код: cw.
Натиснете Tab два пъти.
Резултатът ще бъде вмъкването на следния код в редактора:
Console.WriteLine();

-------------------------------------------------------------------------------------

Посочете за какво служи клавиша F12 във Visual Studio.

Изберете едно
a. Навигиране в кода /Go to Definition/ до тялото на даден метод<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
b. Бързо стартиране /Quick Launch/
c. Навигиране до файл в проекта /Navigate To/
d. Затваряне на програмата /Quit/

-------------------------------------------------------------------------------------

За какво служи клавиш F5 във Visual Studio?

Изберете едно
a. стартиране на програмата в стандартен режим
b. затваряне на стартирана програма
c. стартиране на програмата в дебъг режим<<<<<<<<<<<<<<<<<<<<<<<<<<<<
d. стартиране на програмата в режим стъпка-по-стъпка

-------------------------------------------------------------------------------------

Посочете как се нарича пакетния мениджър в .NET?

Изберете едно
a. PIP
b. dotnet
c. NPM
d. NuGET<<<<<<<<<<<<<<<<<<<<<<<<<

-------------------------------------------------------------------------------------

Демонстрирайте използването на библиотеката System.Text.Json (в .NET 5+) за десериализиране от JSON към обект.

using [System.Text.Json]


;

namespace DeserializeExtra
{
    public class WeatherForecast
    {
        public DateTimeOffset Date { get; set; }
        public int TemperatureCelsius { get; set; }
        public string? Summary { get; set; }
        public string? SummaryField;
        public IList<DateTimeOffset>? DatesAvailable { get; set; }
        public Dictionary<string, HighLowTemps>? TemperatureRanges { get; set; }
        public string[]? SummaryWords { get; set; }
    }

    public class HighLowTemps
    {
        public int High { get; set; }
        public int Low { get; set; }
    }

    public class Program
    {
        public static void Main()
        {
            string jsonString =
@"{
  ""Date"": ""2019-08-01T00:00:00-07:00"",
  ""TemperatureCelsius"": 25,
  ""Summary"": ""Hot"",
  ""DatesAvailable"": [
    ""2019-08-01T00:00:00-07:00"",
    ""2019-08-02T00:00:00-07:00""
  ],
  ""TemperatureRanges"": {
                ""Cold"": {
                    ""High"": 20,
      ""Low"": -10
                },
    ""Hot"": {
                    ""High"": 60,
      ""Low"": 20
    }
            },
  ""SummaryWords"": [
    ""Cool"",
    ""Windy"",
    ""Humid""
  ]
}
";
                
            WeatherForecast? weatherForecast = [ JsonSerializer.Deserialize<WeatherForecast>(jsonString) ]


; 

            Console.WriteLine($"Date: {weatherForecast?.Date}");
            Console.WriteLine($"TemperatureCelsius: {weatherForecast?.TemperatureCelsius}");
            Console.WriteLine($"Summary: {weatherForecast?.Summary}");
        }
    }
}


-------------------------------------------------------------------------------------

Пример: По време на теоретичния изпит се предоставя непълен/неработещ/некоректен програмен
фрагмент. Предоставеният фрагмент да се приведе в работещ вид.
Условие:
Да се напише програма, която трябва да обработва информация за филми в JSON вид.
Създайте клас Movie със свойства за:
● Id (int) – номер на филма
● Name (string) – име на филма
● Rating (decimal) – IMDB рейтинг на филма
● Year (DateTime) – година на премиерата на филма

Подзадачи:
● Преобразувайте данните от клас Movie към JSON
● Преобразувайте JSON към Movie
Изберете подходяща библиотека за работа с JSON за реализиране на подзадачите.

Фрагмент:

public class Movie
{
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Rating { get; set; }
    public DateTime Year { get; set; }
}

using System;
using System.Collections.Generic;
using System.Text.Json;

namespace JSONMovie
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Movie> movies = new List<Movie>();
            movies.Add(new Movie()
            {
                Id = 1,
                Name = "Movie 1",
                Rating = 3,
                Year = DateTime.Parse("1/1/1998")
            });

            movies.Add(new Movie()
            {
                Id = 2,
                Name = "Movie 2",
                Rating = 3,
                Year = DateTime.Parse("1/1/2006")
            });

            string jsonString = JsonSerializer.Serialize(movies);

            Console.WriteLine(jsonString);
        }
    }
}

-------------------------------------------------------------------------------------

Обяснете как работят снипетите във Visual Studio. 

Снипетите във Visual Studio са предварително дефинирани блокове от код, които могат да бъдат вмъквани във вашето текущо разработвано приложение. 
Те служат за ускоряване на процеса на писане на код, като предоставят шаблони, който може да бъде използван и променян според нуждите ви.

-------------------------------------------------------------------------------------

Свържете всеки от посочените случаи с решение, в което средата се използва пълноценно.

Кодът не е добре подреден - [използваме автоматично форматиране (подреждане)]

Разполагаме с файл с около 3000 реда, трябва да намерим тялото на метод, чието име знаем - [Навигираме до метода с помощта на F12]

Налага се често да пишем стандартни фрагменти код - [Използваме снипети, където е възможно]

-------------------------------------------------------------------------------------

Коя от следните опции НЕ Е налична във Visual Studio?

Изберете едно
a. анализ на мрежови пакети<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
b. компилатор
c. преглед на база данни
d. дебъгер

-------------------------------------------------------------------------------------

За какво служи клавишната комбинация Ctrl + F5 във Visual Studio?

Изберете едно
a. стартиране на програмата в режим стъпка-по-стъпка
b. затваряне на стартирана програма
c. стартиране на програмата в дебъг режим
d. стартиране на програмата в стандартен режим<<<<<<<<<<<<<<<<<<<<<<<<<<<

-------------------------------------------------------------------------------------

Посочете с коя директива се включват в кода допълнителни библиотеки.

Изберете едно
a. require
b. include
c. using<<<<<<<<<<<<<<<<<<<<<<<<<<
d. import

-------------------------------------------------------------------------------------

Обяснете как се достъпва NuGET Package Manager.

За да достъпите NuGet Package Manager във Visual Studio, можете да следвате следните стъпки:
Отворете вашия проект в Visual Studio.
Отидете към менюто "Tools" (Инструменти) в горната лента на Visual Studio.
В откриващото се меню изберете "NuGet Package Manager" и след това изберете "Manage NuGet Packages for Solution" (Управление на NuGet пакетите за проекта).
Ще се отвори NuGet Package Manager прозорецът, който позволява управление на NuGet пакетите за вашия проект.

-------------------------------------------------------------------------------------


Демонстрирайте използването на библиотеката System.Text.Json (в .NET 5+) за сериализиране към JSON.

using [ System.Text.Json ]


;
namespace SerializeBasic {
		public class WeatherForecast {
  		public DateTimeOffset Date { get; set; }
    	public int TemperatureCelsius { get; set; }
    	public string? Summary { get; set; }
  	}
  
  	public class Program {
  		public static void Main() {
    		var weatherForecast = new WeatherForecast {
      		Date = DateTime.Parse("2019-08-01"),
        	TemperatureCelsius = 25,
        	Summary = "Hot"
      	};

				string jsonString =  [ JsonSerializer.Serialize(weatherForecast) ]


; 
        Console.WriteLine(jsonString);
      }
    }
}

-------------------------------------------------------------------------------------

Посочете за какво служи клавишната комбинация Ctrl + Q във Visual Studio.

Изберете едно
a. Бързо стартиране /Quick Launch/<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
b. Затваряне на програмата /Quit/
c. Навигиране до файл в проекта /Navigate To/
d. Навигиране в кода /Go to Definition/

-------------------------------------------------------------------------------------

Обяснете каква е разликата между Solution (Решение) и Project (Проект) във Visual Studio.

 Ето разликата между тях:

Solution (Решение):

Solution е най-високото ниво на организация във Visual Studio.
Решението представлява контейнер, който съдържа един или повече проекти (Projects).
Типично, решението се използва за групиране на свързани проекти, които работят заедно за постигане на обща цел.

Project (Проект):

Проектът е единична единица на работа във Visual Studio.
Той представлява колекция от свързани файлове, използвани за създаване на едно приложение, библиотека или друга съответна структура.
Проектите се създават в рамките на решение (Solution) и могат да се състоят от кодови файлове, изображения, конфигурационни файлове и други ресурси, необходими за изграждането и работата на приложението.

-------------------------------------------------------------------------------------

Демонстрирайте как бихте инсталирали разширението Markdown Editor в средата за разработка Visual Studio. Подредете картинките така, че да спазват правилната последователност от стъпките. 

Номерирайте картинките, като използвате цифрите за влачене под таблицата.

Malkoto cherno prozorche e [1]
golqmoto cherno prozorche e [2]
golemiq bql prozorec e [3]

-------------------------------------------------------------------------------------

Посочете коя от изброените програми НЕ e среда за разработка на софтуер.
Изберете едно
a. Visual Studio
b. PyCharm
c. Google Chrome<<<<<<<<<<<<<<<<<<<<<<<<<<<<
d. IntelliJ IDEA

-------------------------------------------------------------------------------------

За какво служи клавишната комбинация Ctrl + K, Ctrl + D?

Изберете едно
a. подреждане на кода<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
b. избор на готов снипет от код
c. нито едно от изброените
d. преименуване на програмна единица

-------------------------------------------------------------------------------------

Посочете коя от следните команди е коректна команда за инсталиране на пакета Banichka чрез Package Manager Console във Visual Studo.

Изберете едно
a. Install-Package Banichka<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
b. dotnet add banichka
c. vs.exe install banichka
d. npm install banichka

-------------------------------------------------------------------------------------

За всяка от клавишните комбинации задайте нейното действие във Visual Studio

Ctrl-K + Ctrl-C [закоментиране на избраните редове]

Ctrl-K + Ctrl-U [премахване на коментар от избраните редове]

Ctrl-K + Ctrl-D [подреждане (форматиране) на кода]

Ctrl + Shift + N [създаване на нов файл]

-------------------------------------------------------------------------------------

Изложете поне 2 разлики между интегрирана среда за разработка (IDE) и текстов редактор.

Функционалност и интеграция:

ИДЕ предлагат широк спектър от функции и инструменти, които подпомагат разработката на софтуер, като например автоматично довършване на код, 
интегрирани дебъгери, инструменти за управление на версиите и средства за профилиране на производителността. 
Те са разработени да предоставят цялостно решение за разработчиците и да улеснят тяхната работа.

Текстовите редактори са по-основни инструменти, насочени предимно към редактиране на текст. Те предлагат базови функционалности като подчертаване на синтаксиса, 
номериране на редовете и някои други функции, но липсват по-специализирани инструменти и функции, които намираме в ИДЕ.


Подход и настройка:

ИДЕ са обикновено предназначени да бъдат използвани за конкретни езици за програмиране или технологии. 
Те предоставят предварително конфигурирани настройки и инструменти, оптимизирани за разработката в конкретна област. 
Това включва настройка на проект, интеграция с компилатори и средства за създаване на сглобки.

Текстовите редактори, от друга страна, се отличават с гъвкавост и настройка. 
Те обикновено са по-леки и по-прости, позволявайки на потребителите да избират плъгини и разширения, които да инсталират и да конфигурират според своите нужди. 
Текстовите редактори позволяват на разработчиците да създават персонализирани работни среди, които отговарят на техните предпочитания и стил на работа.


-------------------------------------------------------------------------------------

Обяснете какво е NuGET Package Manager.

NuGet е пакетен управител за .NET разработка, който е интегриран в Microsoft Visual Studio и предоставя лесен начин за добавяне, 
актуализиране и управление на външни библиотеки и зависимости в проектите ви.
NuGet Package Manager позволява на разработчиците да търсят, инсталират и управляват пакети от онлайн хранилищата на NuGet.

-------------------------------------------------------------------------------------

Обяснете предназначението на breakpoint (точки на счупване) в дебъгера на Visual Studio.

Breakpoints (точки на счупване) са инструмент в дебъгера на Visual Studio, които служат за спиране на изпълнението на програмата в определено място или в определена точка в кода по време на дебъг процеса. 
Те позволяват на разработчиците да проследят изпълнението на програмата стъпка по стъпка и да анализират състоянието й в даден момент.

-------------------------------------------------------------------------------------

Обяснете употребата на SQL Server Object Explorer във Visual Studio.

SQL Server Object Explorer (SSOX) е инструмент в средата на Visual Studio, който позволява на разработчиците да взаимодействат с бази данни, свързани с Microsoft SQL Server, директно от средата за разработка.

-------------------------------------------------------------------------------------

Посочете коя от изброените програми e среда за разработка на софтуер.
Изберете едно
a. Notepad++
b. Visual Studio<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
c. Google Chrome
d. Microsoft Excel

-------------------------------------------------------------------------------------

За какво служи клавиш F10 във Visual Studio?

Изберете едно
a. стартиране на програмата в стандартен режим
b. стартиране на програмата в режим стъпка-по-стъпка<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
c. стартиране на програмата в дебъг режим
d. затваряне на стартирана програма

-------------------------------------------------------------------------------------

Демонстрирайте как бихте инсталирали разширението CodeMaid в средата за разработка Visual Studio. Подредете картинките така, че да спазват правилната последователност от стъпките.

kato minaloto
malko cherno [1]
golqmo cherno [2]
golqmo bqlo [3]

-------------------------------------------------------------------------------------




































































































































