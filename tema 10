-------------------------------------------------------------------------------------------------------------

Имате пример за създаване на процедура:

CREATE [PROCEDURE] [usp]_withdraw_money (account_id INT, money_amount DECIMAL)

[BEGIN]

  -- Transaction logic goes here.

END

Поставете липсващите думи, така че да се получи правилния код.

-------------------------------------------------------------------------------------------------------------

Моля посочете вярното твърдение за посочените типове данни:

VARCHAR(M) → текстов тип данни, 
DOUBLE → тип данни за реални числа, 
Float → тип данни за реални числа

-------------------------------------------------------------------------------------------------------------

Имате представена подзаявка за намиране служителите от отдел финанси и извеждане на всички колони от таблицата. Поставете липсващите думи, за да направите работещ код.

SELECT * FROM employees
[WHERE] department_id [IN]

  (

   SELECT department_id
    [FROM] departments

    [WHERE] name = 'Finance'  );

-------------------------------------------------------------------------------------------------------------

Създайте заявка, която извежда първо име, фамилия и длъжност на служителите, които имат заплата между 20000 и 30000. Използвайте базата данни soft_uni.

SELECT first_name, last_name, job_title

FROM employees

WHERE salary BETWEEN 20000 AND 30000;

-------------------------------------------------------------------------------------------------------------

Допишете следната заявка, така че да изведе като резултат служителите със заплата по-голяма от 50000 и да ги сортира в низходящ ред.

SELECT first_name, last_name, salary FROM employees


SELECT first_name, last_name, salary FROM employees

WHERE salary > 50000

ORDER BY salary DESC;

-------------------------------------------------------------------------------------------------------------

Имате пример за създаване на функция:

CREATE [FUNCTION] [udf]_project_weeks (start_date DATETIME, end_date DATETIME)
[RETURNS] INT
BEGIN
            // тяло на функцията
END
Поставете липсващите думи, така че да се получи правилния код.

-------------------------------------------------------------------------------------------------------------

Посочете коя от следните заявки ще изведе фамилия и заплата, като заплатата е в периода 20000 и 22000.

Изберете едно
a. SELECT `last_name`, `salary`FROM `employees` WHERE `salary` > 20000 OR 'salary' < 22000;
b.

SELECT `last_name`, `salary`FROM `employees` WHERE `salary` <= 20000 AND 22000;
c.
SELECT `last_name`, `salary`FROM `employees` WHERE `salary` > 22000;
d.
SELECT `last_name`, `salary`FROM `employees` WHERE `salary` BETWEEN 20000 AND 22000;<<<<<<<<<<<<<<<<<<<<<<<

-------------------------------------------------------------------------------------------------------------

Моля посочете вярното твърдение за съхранени процедури в език My SQL.

Изберете едно
a. Могат да приемат входни параметри; Могат да връщат изходни резултати.<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
b. Няма вярно твърдение.
c. Не могат да приемат входни параметри; Могат да връщат изходни резултати.
d. Могат да приемат входни параметри; Не могат да връщат изходни резултати.

-------------------------------------------------------------------------------------------------------------

Дадена е дефиниция за транзакция.  Поставете липсващите думи в дефиницията. 

Транзакциите гарантират пълнотата и цялостността на базата данни. Всички промени в транзакцията са  [временни]. Промените се съхраняват едва след изпълнението на [COMMIT]. 
По всяко време всички промени могат да се отменят чрез [ROLLBACK].

-------------------------------------------------------------------------------------------------------------

В посочения пример имате заявка за създаване на таблица persons с колони person_id, first_name, passport_id и salary. Моля избирете липсващите думи за всяка колона от таблицата.

CREATE TABLE persons(

person_id  [INT] PRIMARY KEY,
first_name [VARCHAR(50)],
salary [DECIMAL(8,2)],
passport_id [INT] UNIQUE,
CONSTRAINT fk_persons_passports FOREIGN KEY(passport_id) REFERENCES passports(passport_id)

);

-------------------------------------------------------------------------------------------------------------

Имате създадена съхранена процедура с параметър usp_select_employees_by_seniority(min_years_at_work INT). Моля да дефинирате заявка за извикване на процедурата, за да може да бъде използвана.

CALL usp_select_employees_by_seniority(15);

-------------------------------------------------------------------------------------------------------------

Емате следната заявка. Посочете вярното твърдение за получения резултат от агрегиращата използвана функция след нейното изпълнение. 

SELECT e.`department_id`,
  AVG(e.`salary`) AS 'AvgSalary'
FROM `employees` AS e
GROUP BY e.`department_id`;


Изберете едно
a. Намира средноаритметичната стойност на заплатите на служителите и преименува колоната.<<<<<<<<<<<<<<<<<
b. Намира максималната стойност на заплатите на служителите и преименува колоната.
c. Намира сумата на заплатите на служителите и преименува колоната.

-------------------------------------------------------------------------------------------------------------

Посочете коя от следните заявки ще изведе всички записи от таблица departments и извежда първите два реда от таблицата.

Изберете едно
a. SELECT * FROM departments WHERE department_id <=2<<<<<<<<<<<<<<<<<<<<<<<<<<
b. SELECT * FROM departments WHERE department_id <=20
c. SELECT * FROM departments WHERE department_id >2
d. SELECT * FROM employees WHERE employee_id <=20

-------------------------------------------------------------------------------------------------------------

Посочете действието на използваната връзка в следната заявка: 

SELECT * FROM employees AS e

 RIGHT OUTER JOIN departments AS d

 ON e.department_id = d.department_id;


Изберете едно
a.
Тази връзка връща записите, отговарящи на свързващото условие и също така несъвпадащите записи от таблица departments.<<<<<<<<<<<<<<<<<<<<<<<<<
b. Тази връзка връща само редовете, отговарящи на условието за свързване.
c.
Тази връзка връща записите, отговарящи на свързващото условие и също така несъвпадащите записи от лявата таблица.
d. Тази връзка връща записите, отговарящи на свързващото условие и също така несъвпадащите записи от таблица employees.

-------------------------------------------------------------------------------------------------------------

Имплементирайте код на заявка, която извежда колоните first_name, last_name и job_title от таблица employees и извежда само тези записи със заплата между 20000 и 30000.

SELECT first_name, last_name, job_title

FROM employees

WHERE salary BETWEEN 20000 AND 30000;

-------------------------------------------------------------------------------------------------------------

Във вашата база от данни Soft_uni имате създадена таблица Employees с 500 записа. Необходимо е да добавите нова колона с име salary. Напишете заявка за добавяне на колоната в таблица employees. 

ALTER TABLE employees
ADD salary DECIMAL;

-------------------------------------------------------------------------------------------------------------

Посочете коя от следните заявки ще изтрие записи от таблица projects, които са с начална дата 2006-01-01.

Изберете едно
a. DELETE FROM projects WHERE start_date = '2006-01-01';<<<<<<<<<<<<<<<<<<<<<<<<
b. DELETE FROM projects WHERE start_date > '2006-01-01';
c. DELETE FROM projects WHERE end_date = '2006-01-01';
d. DELETE FROM employees WHERE salary = '2006-01-01';

-------------------------------------------------------------------------------------------------------------

Посочете какво прави клаузата FULL JOIN.

FULL JOIN - Тази връзка връща записите, отговарящи на свързващото условие и също така несъвпадащите записи от лявата и от дясната таблица.

-------------------------------------------------------------------------------------------------------------

Имате синтаксис на транзакция в My SQL. Открийте липсващите думи в кода и го модифицирайте, така че да получите коректно работеща заявка. 

[START] [TRANSACTION]
[UPDATE] accounts SET balance = balance – withdraw_amount
WHERE id = account
--Transaction logic goes here
IF ROW_COUNT() <> 1 THEN -- Affected rows are different than one.
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid account';
            [ROLLBACK];
ELSE
            [COMMIT];
[END IF];

-------------------------------------------------------------------------------------------------------------




























































































































